{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport NativeSelect from \"../NativeSelect/NativeSelect\";\nimport CustomSelect from \"../CustomSelect/CustomSelect\";\nimport { withAdaptivity } from \"../../hoc/withAdaptivity\";\n\nvar Select = function Select(_ref) {\n  var hasMouse = _ref.hasMouse,\n      props = _objectWithoutProperties(_ref, [\"hasMouse\"]); // Use custom select if device has connected a mouse\n\n\n  if (hasMouse) {\n    var children = props.children,\n        _restProps = _objectWithoutProperties(props, [\"children\"]);\n\n    var value = _restProps.hasOwnProperty('value') ? _restProps.value : _restProps.defaultValue;\n    return createScopedElement(CustomSelect, _extends({\n      value: value\n    }, _restProps));\n  }\n\n  var _props$options = props.options,\n      options = _props$options === void 0 ? [] : _props$options,\n      popupDirection = props.popupDirection,\n      renderOption = props.renderOption,\n      restProps = _objectWithoutProperties(props, [\"options\", \"popupDirection\", \"renderOption\"]);\n\n  return createScopedElement(NativeSelect, restProps, options.map(function (_ref2) {\n    var label = _ref2.label,\n        value = _ref2.value;\n    return createScopedElement(\"option\", {\n      value: value,\n      key: \"\".concat(value)\n    }, label);\n  }));\n};\n\nexport default withAdaptivity(Select, {\n  hasMouse: true\n});","map":{"version":3,"sources":["../../../src/components/Select/Select.tsx"],"names":["Select","hasMouse","props","children","restProps","value","options","popupDirection","renderOption","label","withAdaptivity"],"mappings":";;;AACA,OAAA,YAAA,MAAA,8BAAA;AACA,OAAA,YAAA,MAAA,8BAAA;AACA,SAAA,cAAA,QAAA,0BAAA;;AAIA,IAAMA,MAAsC,GAAG,SAAzCA,MAAyC,CAAA,IAAA,EAAyC;AAAA,MAAtCC,QAAsC,GAAA,IAAA,CAAtCA,QAAsC;AAAA,MAAzBC,KAAyB,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CACtF;;;AACA,MAAA,QAAA,EAAc;AAAA,QACJC,QADI,GACuBD,KADvB,CAAA,QAAA;AAAA,QACSE,UADT,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,UAAA,CAAA,CAAA;;AAGZ,QAAMC,KAAK,GAAGD,UAAS,CAATA,cAAAA,CAAAA,OAAAA,IACVA,UAAS,CADCA,KAAAA,GAEVA,UAAS,CAFb,YAAA;AAIA,WACE,mBAAA,CAAA,YAAA,EAAA,QAAA,CAAA;AACE,MAAA,KAAK,EAAEC;AADT,KAAA,EADF,UACE,CAAA,CADF;AAMD;;AAfqF,MAAA,cAAA,GAiBjBH,KAjBiB,CAAA,OAAA;AAAA,MAiB9EI,OAjB8E,GAAA,cAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,cAAA;AAAA,MAiBhEC,cAjBgE,GAiBjBL,KAjBiB,CAAA,cAAA;AAAA,MAiBhDM,YAjBgD,GAiBjBN,KAjBiB,CAAA,YAAA;AAAA,MAiB/BE,SAjB+B,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,SAAA,EAAA,gBAAA,EAAA,cAAA,CAAA,CAAA;;AAmBtF,SACE,mBAAA,CAAA,YAAA,EAAA,SAAA,EACG,OAAO,CAAP,GAAA,CAAY,UAAA,KAAA,EAAA;AAAA,QAAGK,KAAH,GAAA,KAAA,CAAA,KAAA;AAAA,QAAUJ,KAAV,GAAA,KAAA,CAAA,KAAA;AAAA,WAAsB,mBAAA,CAAA,QAAA,EAAA;AAAQ,MAAA,KAAK,EAAb,KAAA;AAAsB,MAAA,GAAG,EAAA,GAAA,MAAA,CAAA,KAAA;AAAzB,KAAA,EAAtB,KAAsB,CAAtB;AAFjB,GAEK,CADH,CADF;AAnBF,CAAA;;AA0BA,eAAeK,cAAc,CAAA,MAAA,EAAS;AACpCT,EAAAA,QAAQ,EAAE;AAD0B,CAAT,CAA7B","sourcesContent":["import { FunctionComponent } from 'react';\nimport NativeSelect from '../NativeSelect/NativeSelect';\nimport CustomSelect, { CustomSelectProps } from '../CustomSelect/CustomSelect';\nimport { withAdaptivity, AdaptivityProps } from '../../hoc/withAdaptivity';\n\nexport interface SelectProps extends CustomSelectProps, AdaptivityProps {}\n\nconst Select: FunctionComponent<SelectProps> = ({ hasMouse, ...props }: SelectProps) => {\n  // Use custom select if device has connected a mouse\n  if (hasMouse) {\n    const { children, ...restProps } = props;\n\n    const value = restProps.hasOwnProperty('value')\n      ? restProps.value\n      : restProps.defaultValue;\n\n    return (\n      <CustomSelect\n        value={value}\n        {...restProps}\n      />\n    );\n  }\n\n  const { options = [], popupDirection, renderOption, ...restProps } = props;\n\n  return (\n    <NativeSelect {...restProps}>\n      {options.map(({ label, value }) => <option value={value} key={`${value}`}>{label}</option>)}\n    </NativeSelect>\n  );\n};\n\nexport default withAdaptivity(Select, {\n  hasMouse: true,\n});\n"]},"metadata":{},"sourceType":"module"}